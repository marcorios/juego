{"name":"Juego Mini Hockey de leds ","tagline":"proyecto #3 (sistemas digitales)","body":"### Descripción\r\nUn sistema digital es un conjunto de dispositivos destinados a la generación, transmisión, manejo, procesamiento o almacenamiento de señales digitales. También, y a diferencia de un sistema analógico, un sistema digital es una combinación de dispositivos diseñados para manipular cantidades físicas o información que estén representadas en forma digital; es decir, que sólo puedan tomar valores discretos. Una de las aplicaciones de estos sistemas es la elaboración de juegos electrónicos basados en un microcontrolador el cual permite el manejo de diferentes funciones. En este sitio  se presentará la elaboración e implementación de un juego basado en un microcontrolador ATmega2560, el cual consiste en mover una barra para no dejar pasar una bola en un límite de distancia. El juego se presenta a través de matrices de leds que simulan el movimiento de la bola y de la barra. El movimiento de la barra se realiza a través de sensores que captan el cambio de luz, enviando interrupciones de cambio,  que será una innovación de los juegos de Hockey electrónicos tradicionales.\r\n\r\n### Materiales\r\n* Arduino Mega 2560\r\n* Dos matrices de leds de 8x8\r\n* Integrado MAX7219\r\n* Fotoresistencias\r\n* Dos BCD de siete segmentos\r\n* Dos integrados 74LS08 (compuertas AND)\r\n\r\n### Procedimiento\r\nPara el desarrollo del proyecto, se optó por dividirlo en varias etapas para tratar su desarrollo individual. \r\n\r\n1. Para el uso de las matrices de leds, fue necesario el uso de la librería LedControl pues facilita el manejo de éstas cuando se trata de mas de un dispositivo a usar. \r\nPrimero se incluye la librería y se crea el objeto tipo LedControl: \r\n`#include \"LedControl.h\" \r\nLedControl lc=LedControl(22,23,24,2);`\r\nSe configuran las matrices a usar:\r\n`/*\r\n   The MAX72XX is in power-saving mode on startup,\r\n   we have to do a wakeup call\r\n   */\r\n  lc.shutdown(0,false);    \r\n  /* Set the brightness to a medium values */\r\n  lc.setIntensity(0,8);\r\n  /* and clear the display */\r\n  lc.clearDisplay(0);\r\n  lc.shutdown(1,false);\r\n  /* Set the brightness to a medium values */\r\n  lc.setIntensity(1,8);\r\n  /* and clear the display */\r\n  lc.clearDisplay(1);`\r\nY se procede a usar las funciones propias de esta librearia para mostrar un punto \"moviendose por la matriz\". se usó la función SetRow  que escribe un valor en binario en una fila para prender los leds indicados, emulando el movimiento de la bola.\r\nAsi, con la linea `lc.setRow(0,5,7);` se prenderían los tres (en binario 7= 00000111)primeros leds de la fila cinco, por ejemplo.\r\n\r\n2. En segunda instancia, se aborda el problema del movimiento de las barras con las que golpea la bola, que por requerimientos debería moverse sin que el jugador tenga ningún contacto directo con el sistema. Así las cosas, se utilizaron fotoresistencias como sensores del movimiento. Para esto, se caracterizaron cinco movimientos posibles de la barra asi:\r\nse planteó un divisor de voltaje para cada una de las fotoresistencias, que a falta de luz tienen un valor de resistencia muy grande pero en presencia de luz, este valor disminuye considerablemente. Usando este principio se utilizan luces leds que pasan por los sensores. Debido a que se tenían diez sensores, pero solo cuatro pines de interrupción en el Arduino Mega 2560, fue necesario el usi de compuertas and. Asi, cada sensor va a la entrada de la and siendo su voltaje normal un 'alto' lo que a la salida genera un 1. Pero en presencia de la luz, el voltaje del sensor va a caer a un 'bajo' forzando a que la salida sea un 0. Por este motivo, se crearon dos interrupciones (una por cada jugador) que se conectan a las salidas de las dos and que van a se 0, cada vez que se active uno de los sensores. \r\nPara que muestre las barras según la posición y el sensor que esté activo, basta con hacer una serie de condicionales: \r\n`if(a==1){\r\n  lc.setRow(0,0,0);\r\n  lc.setRow(0,0,B11100000);\r\n}`\r\nLo que sitúa la barra en la primera posicion, siendo 'a' la variable que se modifica al activarse la interrupcion.\r\n\r\n3. Después de esto, se procede a implementar el sistema que lleve el marcador para el cual se usaron dos BCD de siete segmentos que se codificaron por medio de software y se crearon las funciones que muestran cada número dependiendo del marcador: \r\n`//muestra el marcador\r\nif(marc1==0){\r\n  cero1();\r\n}`\r\nSiendo marc1 la variable que lleva el marcador del jugador 1, y cero1 la función que muestra el 0 para el jugador 1.\r\n\r\n4. Por último para el montaje físico, se utilizaron tres cajas de madera en donde va toda la circuitería del sistema para darle estética. Dos cajas alargadas pero mas pequeñas para los juegos de sensores, y una mas grande y cuadrada para el montaje del juego.  \r\n\r\n### Conclusiones\r\n* Para el manejo de matrices de leds y display de 7 segmentos es más recomendado utilizar integrado MAX7219 para facilitar el uso de la multiplexación.\r\n* En el reconocimiento de la luz por parte de los sensores influye la luz externa, el cual se le realiza una interferencia para que no influya mucho en la respuesta.\r\n* Es necesario el conocimiento del microprocesador y sus características para el correcto desarrollo del proyecto.\r\n* La elección del tipo de sensor a utilizar es básica para evitar complicaciones futuras en el desarrollo del proyecto.\r\n\r\n### Autores\r\nIsabel Cristina Cardona Saineda (@isabelcardona)\r\nDaniel Felipe Zambrano Villamizar (@danielzambrano)\r\nMarco Aurelio Rios Palacios (@marcorios)\r\nIn 2015, Universidad del Quindio, Programa de Ingeniería Electrónica para el espacio de Microprocesadores.\r\n\r\n### Links de descarga\r\n*  [repositorio en github](https://github.com/marcorios/juego)\r\n* [video del funcionamiento final](https://github.com/marcorios/juego/blob/master/video-1448119837.mp4.mp4)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}